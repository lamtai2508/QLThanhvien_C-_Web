@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    int i = 0;
}
@model List<QLThanhvien_Web.Models.Device>

<div class="container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Quản Lý</h2>
            <div class="user-info">
                <div class="user-name" style="text-align: center; font-size: 25px">Chào mừng tới thư quán</div>
                @* <div class="user-avatar">N</div> *@
                @* <div class="user-name">Nguyễn Văn A</div> *@
            </div>
        </div>
        <div class="sidebar-menu">
            <div class="menu-item" onclick="window.location.href='/Member/Profile'">
                <i>👤</i> Thông tin cá nhân
            </div>
            <div class="menu-item active">
                <i>📅</i> Đặt chỗ thiết bị
            </div>
            <div class="menu-item" onclick="window.location.href='/Booking/Booking_history'">
                <i>📚</i> Lịch sử đặt chỗ
            </div>
            <div class="menu-item" onclick="window.location.href='/DeviceReturn/DeviceReturn'">
                <i>🔄</i> Trả thiết bị
            </div>
            <div class="menu-item" onclick="window.location.href='/Violation/Violations_history'">
                <i>⚠️</i> Lịch sử vi phạm
            </div>
            <div class="menu-item " onclick="window.location.href='/ChangePassword/ChangePassword'">
                <i>🔒</i> Đổi mật khẩu
            </div>
            <div class="menu-item" onclick="window.location.href='/Login/Login'">
                <i>🔚</i> Đăng xuất
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="header">
            <h1>Đặt Chỗ Thiết Bị</h1>
            <div class="search-bar">
                <input type="text" placeholder="Tìm kiếm thiết bị...">
                <button>🔍</button>
            </div>
        </div>

        <!-- Available Devices -->
        <div class="content-section">
            <div class="section-header">
                <h2>Thiết bị có sẵn</h2>
            </div>
            <div class="data-table">
                <table>
                    <thead>
                        <tr>
                            <th>Mã Thiết bị</th>
                            <th>Tên thiết bị</th>
                            <th>Loại</th>
                            <th>Trạng thái</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="deviceTableBody">
                        @foreach (var d in Model)
                        {
                            <tr>
                                <td name="device_id" id="device_id">@d.device_id</td>
                                <td name="device_name" id="device_name">@d.device_name</td>
                                <td name="device_type" id="device_type">@d.device_type</td>
                                <td name="status" id="device_status"><span class="status @(d.status =="Có sẵn" ? "approved" : "denied" )">@d.status</span></td>
                                <td><button class="btn btn-primary subButton" id="subButton" >Đặt ngay</button></td>
                            </tr>
                        }
                    </tbody>
            </div>
            </table>
            <div style="margin-top:10px;">
                <button onclick="prevPage()" id="prevBtn">Previous</button>
                <span id="page-info"></span>
                <button onclick="nextPage()" id="nextBtn">Next</button>
            </div>
        </div>
    </div>

    <!-- Booking Form -->
    <div class="content-section">
        <div class="section-header">
            <h2>Đặt chỗ thiết bị</h2>
        </div>
        <form class="booking-form">
            <div class="form-group">
                <label for="device">Thiết bị</label>
                <select id="device">
                    <option value="">Chọn thiết bị</option>
                    @foreach (var dv in Model)
                    {
                        <option value="@dv.device_id" id="device-name">@dv.device_name</option>
                    }

                        </select>
                    </div>
                    <div class="form-group">
                        <label for="start-time">Thời gian bắt đầu</label>
                        <input type="datetime-local" id="borrowedDate" required>
                    </div>
                    <div class="form-group">
                        <label for="end-time">Thời gian kết thúc</label>
                        <input type="datetime-local" id="returnedDate" required>
                    </div>
                    <div class="form-group">
                        <label for="purpose">Mục đích sử dụng</label>
                        <textarea id="purpose" placeholder="Nhập mục đích sử dụng thiết bị..." required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="location">Địa điểm sử dụng</label>
                        <input type="text" id="location" placeholder="Nhập địa điểm sử dụng" required>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary">Hủy</button>
                        <button type="submit" class="btn btn-primary">Đặt chỗ</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
    var devices = [
    @foreach (var d in Model)
    {
        @: {
        @: "device_id": "@d.device_id",
        @: "device_name": "@d.device_name",
        @: "device_type": "@d.device_type",
        @: "status": "@d.status"
        @: },
    }
    ];
    
    // locate device to subcription form: 
    




    var currentPage = 1;
    var pageSize = 5;

    function renderDevices() {
        var start = (currentPage - 1) * pageSize;
        var end = start + pageSize;
        var pageDevices = devices.slice(start, end);

        var tableBody = document.getElementById("deviceTableBody");
        tableBody.innerHTML = "";

        pageDevices.forEach(function(device) {
            var row = `<tr>
                            <td name="device_id">${device.device_id}</td>
                            <td name="device_name">${device.device_name}</td>
                            <td name="device_type">${device.device_type}</td>
                            <td><span class="status ${device.status == "bình thường" ? "approved" : "denied"}">${device.status}</span></td>
                            <td><button class="btn btn-primary subButton">Đặt ngay</button></td>
                        </tr>`;
            tableBody.innerHTML += row;
        });

        document.getElementById("page-info").innerText = `Trang ${currentPage} / ${Math.ceil(devices.length / pageSize)}`;

        // Toggle visibility of buttons
        document.getElementById("prevBtn").style.display = currentPage > 1 ? 'inline-block' : 'none';
        document.getElementById("nextBtn").style.display = currentPage * pageSize < devices.length ? 'inline-block' : 'none';
    }

    function nextPage() {
        if (currentPage * pageSize < devices.length) {
            currentPage++;
            renderDevices();
        }
    }

    function prevPage() {
        if (currentPage > 1) {
            currentPage--;
            renderDevices();
        }
    }

    // Render lần đầu
    renderDevices();
    

    // EventListener to search-bar

    document.addEventListener("DOMContentLoaded", function () {
    const searchInput = document.querySelector(".search-bar input");
    const searchButton = document.querySelector(".search-bar button");

    // Event listener for the search button
    searchButton.addEventListener("click", function () {
        const query = searchInput.value.trim(); // Get the search input value
        fetchDevices(query); // Call the function to fetch devices
    });

    // Event listener for the "Enter" key in the search input
    searchInput.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
            event.preventDefault(); // Prevent the default form submission behavior
            const query = searchInput.value.trim(); // Get the search input value
            fetchDevices(query); // Call the function to fetch devices
        }
    });

    // Function to fetch devices from the server
    function fetchDevices(query) {
        fetch(`/Booking/SearchDevices?input=${encodeURIComponent(query)}`, {
            method: "GET",
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error("Failed to fetch devices");
                }
                return response.json();
            })
            .then((data) => {
                // Update the devices list in the UI
                updateDeviceTable(data);
            })
            .catch((error) => {
                console.error("Error fetching devices:", error);
                alert("Có lỗi xảy ra khi tìm kiếm thiết bị.");
            });
    }

    // Function to update the device table in the UI
    function updateDeviceTable(devices) {
        const tableBody = document.getElementById("deviceTableBody");
        tableBody.innerHTML = ""; // Clear the existing table rows

        devices.forEach((device) => {
            const row = `<tr>
                            <td name="device_id">${device.device_id}</td>
                            <td name="device_name">${device.device_name}</td>
                            <td name="device_type">${device.device_type}</td>
                            <td><span class="status ${device.status === "bình thường" ? "approved" : "denied"}">${device.status}</span></td>
                            <td><button class="btn btn-primary subButton">Đặt ngay</button></td>
                        </tr>`;
            tableBody.innerHTML += row;
        });

        // Reattach event listeners to the "Đặt ngay" buttons
        attachSubButtonListeners();
    }

    // Function to reattach event listeners to "Đặt ngay" buttons
    function attachSubButtonListeners() {
        const subButtons = document.querySelectorAll(".subButton");
        subButtons.forEach((button) => {
            button.addEventListener("click", function () {
                changeOptions(button);
            });
        });
    }
});


    // change selected option to match "Đặt ngay" button

    document.addEventListener("DOMContentLoaded", function () {
    // Use event delegation on the parent element
    const tableBody = document.getElementById("deviceTableBody");

        tableBody.addEventListener("click", function (event) {
            // Check if the clicked element is a subButton
            if (event.target && event.target.classList.contains("subButton")) {
                // Call the changeOptions function and pass the clicked button
                changeOptions(event.target);
            }
        });
    });

    function changeOptions(button) {
        // Get the row containing the clicked button
        const row = button.closest("tr");

        // Extract the device name from the <td> element
        const deviceName = row.querySelector("td[name='device_name']").textContent.trim();
        // const deviceName = row.querySelector("td[data-name='device_name']").textContent.trim();


        // Get the <select> element
        const selectElement = document.getElementById("device");

        // Find the option in the <select> that matches the device name
        const options = selectElement.options;
        for (let i = 0; i < options.length; i++) {
            if (options[i].textContent.trim() === deviceName) {
                // Set the matching option as selected
                selectElement.selectedIndex = i;
                break;
            }
        }

        // Optionally, scroll to the booking form
        document.querySelector(".booking-form").scrollIntoView({ behavior: "smooth" });

        // Log the selected device for debugging
        console.log(`Selected Device: ${deviceName}`);
    }


     // addReservation value except resId

    function addReservation(deviceId, resDate, resBD, resRD) {
        // Create the data object
        const reservationData = {
            device_id: deviceId,
            reservation_date: resDate,
            borrowed_date: resBD,
            returned_date: resRD,
        };

        // Send the data to the server using fetch
        fetch('/Booking/RetrieveResData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reservationData)
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Failed to add reservation');
            }
        })
        .then(data => {
            // Show an alert based on the server's response
            // if (data.success) {
            //     alert(data.message);
            // }
        })
        .catch(error => {
            // Handle error (e.g., show an error message)
            alert('Error adding reservation: ' + error.message);
            console.error(error);
        });
    }

    // add event listioner to submit button
    document.addEventListener("DOMContentLoaded", function () {
        const submitButton = document.querySelector(".btn.btn-primary[type='submit']");

        submitButton.addEventListener("click", function (event) {
            // Prevent the default form submission
            event.preventDefault();

            // Get the selected DeviceId from the dropdown
            const selectElement = document.getElementById("device");
            const deviceId = selectElement.value; // Gets the value of the selected option (DeviceId)

            // Check if a device is selected
            if (!deviceId) {
                alert("Vui lòng chọn một thiết bị.");
                return; // Stop further execution
            }

            // Find the selected device in the devices array
            const selectedDevice = devices.find(device => device.device_id === deviceId);

            // Decode the HTML-encoded string
            const parser = new DOMParser();
            const decodedStatus = parser.parseFromString(selectedDevice.status, "text/html").body.textContent;

            console.log(selectedDevice);
            // Check if the device status is "Được được mượn"
            if (selectedDevice && decodedStatus === "Đang được mượn") {
                alert("Thiết bị đang được mượn. Vui lòng chọn thiết bị khác.");
                return; // Stop further execution
            }
            // Check if the device status is "Được đặt chỗ"
            if (selectedDevice && decodedStatus === "Được đặt chỗ") {
                alert("Thiết bị đã được đặt chỗ. Vui lòng chọn thiết bị khác.");
                return; // Stop further execution
            }

            // Get other form values
            const now = new Date(); // Current date and time
            const reservationDate = formatDateToDatetimeLocal(now); // Format the current date
            const borrowedDate = document.getElementById("borrowedDate").value;
            const returnedDate = document.getElementById("returnedDate").value;

            // Check if date values are empty
            if (!borrowedDate || !returnedDate) {
                alert("Không được bỏ trống thời gian đặt thiết bị");
                return;
            }

			// check if returned day is greater than borrowed day
            if (new Date(returnedDate) <= new Date(borrowedDate)) {
                alert("Thời gian kết thúc phải sau thời gian bắt đầu. Vui lòng nhập lại.");
                return; // Stop further execution
            }

            // prevent user have violation to reserve new device 


            // Create the reservation data object
            const reservationData = {
                device_id: deviceId,
                reservation_date: reservationDate,
                borrowed_date: borrowedDate,
                returned_date: returnedDate,
            };
            
            fetch('/Booking/RetrieveResData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(reservationData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to process the reservation');
                }
                return response.json();
            })
            .then(data => {
                // Show an alert based on the server's response
                if (data.success) {
                    alert(data.message); // Success message
                } else {
                    alert(data.message); // Error message
                }
            })
            .catch(error => {
                // Handle error (e.g., show an error message)
                alert('Có lỗi xảy ra khi xử lý yêu cầu: ' + error.message);
                console.error(error);
            });

            // Call the addReservation function
            addReservation(deviceId, reservationDate, borrowedDate, returnedDate);
            console.log(deviceId, reservationDate, borrowedDate, returnedDate);
        });
    });

        function formatDateToDatetimeLocal(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');

        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }



    </script>

